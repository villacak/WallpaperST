package au.com.main;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import android.app.AlertDialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.res.TypedArray;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Matrix;
import android.media.AudioManager;
import android.media.MediaPlayer;
import android.os.AsyncTask;
import android.os.Bundle;
import android.util.Log;
import android.view.Display;
import android.view.KeyEvent;
import android.view.Menu;
import android.view.MenuInflater;
import android.view.MenuItem;
import android.view.View;
import android.view.ViewGroup;
import android.view.WindowManager;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.BaseAdapter;
import android.widget.Gallery;
import android.widget.ImageView;
import android.widget.SpinnerAdapter;
import android.widget.Toast;
import au.com.bean.ImageFieldText;
import au.com.constants.ConfigEnum;
import au.com.constants.Constants;
import au.com.constants.ReturnCodes;
import au.com.main.R.drawable;
import au.com.wp.util.Util;

public class GalleryST extends BetterActivity {

	private SpinnerAdapter spinAdpt;
	private Gallery gallery;
	private static Context ctx;
	private static float screenPorcentageSize;
	private int screenOrientation;
	private AudioManager audio;

	private int[] thumbIds;
	private boolean[] thumbsSelected;

	protected int galItemBg;
	protected static int clikedPos;
	protected static int imageId;

	protected List<ImageFieldText> directoryEntries = new ArrayList<ImageFieldText>();


	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.galery);

		GalleryST.ctx = this.getApplicationContext();
		audio = (AudioManager) getSystemService(Context.AUDIO_SERVICE);
		setVolumeControlStream(AudioManager.STREAM_MUSIC);

		if (savedInstanceState == null) {
			MediaPlayer mp = MediaPlayer.create(GalleryST.ctx, R.raw.tostransporter);
			mp.start();
			mp.release();

			savedInstanceState = new Bundle();
			Util u = new Util(GalleryST.ctx);
			GalleryST.screenPorcentageSize = Float.parseFloat(u.getParamValue(ConfigEnum.SIZE));
			screenOrientation = Integer.parseInt(u.getParamValue(ConfigEnum.ORIENTATION));
			setRequestedOrientation(screenOrientation);
			savedInstanceState.putString(Constants.FIRST, Constants.NOT_FIRST);
		}

		gallery = (Gallery) findViewById(R.id.examplegallery);
		if (spinAdpt == null) {
			spinAdpt = new AddImgAdp(this);
		}
		gallery.setAdapter(new AddImgAdp(this));

		gallery.setOnItemClickListener(new OnItemClickListener() {
			@SuppressWarnings("rawtypes")
			public void onItemClick(AdapterView parent, View v, int position, long id) {
				GalleryST.imageId = GalleryST.this.directoryEntries.get(position).getmNumberImg();
				AlertDialog.Builder alt_bld = new AlertDialog.Builder(GalleryST.this);
				alt_bld.setMessage("Set it as wallpaper?").setCancelable(false)
						.setPositiveButton("Ok", new DialogInterface.OnClickListener() {
							public void onClick(DialogInterface dialog, int id) {
								GalleryST.this.updatePicture();
							}
						}).setNegativeButton("Cancel", new DialogInterface.OnClickListener() {
							public void onClick(DialogInterface dialog, int id) {
								return;
							}
						});
				AlertDialog alert = alt_bld.create();
				alert.setIcon(R.drawable.tng);
				alert.setTitle("Wallpaper update");
				alert.show();
			}
		});

	}


	public void updatePicture() {
		new UpdateWallpaper().execute();
	}


	@Override
	public boolean onKeyDown(int keyCode, KeyEvent event) {
		switch (keyCode) {
			case KeyEvent.KEYCODE_BACK:
				MediaPlayer mp = MediaPlayer.create(GalleryST.ctx, R.raw.tosturboliftdoor);
				mp.start();
				System.gc();
				finish();
				return true;

			case KeyEvent.KEYCODE_VOLUME_UP:
				audio.adjustStreamVolume(AudioManager.STREAM_MUSIC, AudioManager.ADJUST_RAISE, AudioManager.FLAG_SHOW_UI);
				return true;

			case KeyEvent.KEYCODE_VOLUME_DOWN:
				audio.adjustStreamVolume(AudioManager.STREAM_MUSIC, AudioManager.ADJUST_LOWER, AudioManager.FLAG_SHOW_UI);
				return true;

			default:
				return false;
		}
	}


	public class AddImgAdp extends BaseAdapter {
		private Context cont;
		private TypedArray typArray;
		private Class<drawable> rDrawable;


		public AddImgAdp(Context c) {
			cont = c;
			if (rDrawable == null) {
				rDrawable = R.drawable.class; // getDrawable(rClass);
			}
			// GalleryExample.this.directoryEntries.clear();
			if (GalleryST.this.directoryEntries == null || GalleryST.this.directoryEntries.size() == 0) {
				Util u = new Util(GalleryST.ctx);
				GalleryST.this.directoryEntries = u.getListReady(rDrawable);
			}
			typArray = obtainStyledAttributes(R.styleable.GalleryTheme);
			galItemBg = typArray.getResourceId(R.styleable.GalleryTheme_android_galleryItemBackground, 0);
			typArray.recycle();
		}


		/*
		 * (non-Javadoc)
		 * 
		 * @see java.lang.Object#finalize()
		 */
		@Override
		protected void finalize() throws Throwable {
			rDrawable = null;
			System.gc();
			super.finalize();
		}


		public int getCount() {
			return GalleryST.this.directoryEntries.size();
		}


		public Object getItem(int position) {
			return position;
		}


		public long getItemId(int position) {
			return position;
		}


		public View getView(int position, View convertView, ViewGroup parent) {
			ImageView imgView = new ImageView(cont);
			Display d = ((WindowManager) getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();
			int maxHeight = 0;
			int maxWidth = 0;
			int variableW = 0;
			int variableH = 0;
			float x = 0f;
			float y = 0f;

			if (d.getRotation() == 0) {
				// Portrait
				maxHeight = d.getHeight();
				maxWidth = d.getWidth();
				List<Float> coordXY = getPorcentagePortrait(GalleryST.screenPorcentageSize, maxWidth, maxHeight);
				x = coordXY.get(Constants.Y_SIZE);
				y = coordXY.get(Constants.X_SIZE);
				variableH = (int) x;
				variableW = (int) y;
			} else {
				// Landscape
				maxHeight = d.getHeight();
				maxWidth = d.getWidth();
				List<Float> coordXY = getPorcentageLandscapet(GalleryST.screenPorcentageSize, maxWidth, maxHeight);
				x = coordXY.get(Constants.Y_SIZE);
				y = coordXY.get(Constants.X_SIZE);
				variableH = (int) x;
				variableW = (int) y;
			}
			imgView.setImageResource(GalleryST.this.directoryEntries.get(position).getmNumberImg());
			imgView.setLayoutParams(new Gallery.LayoutParams(variableW, variableH));
			imgView.setScaleType(ImageView.ScaleType.FIT_XY);
			imgView.setBackgroundResource(galItemBg);
			return imgView;
		}
	}


	/**
	 * Returns startX, startY, endX, endY in a List<Integer>
	 * 
	 * @param porcentage
	 * @param xMax
	 * @param yMax
	 * @return
	 */
	public List<Float> getPorcentagePortrait(float porc, int xMax, int yMax) {

		float porcX = porc;
		float porcY = porcX / Constants.RATIO;

		// Get screen centre
		float xM = xMax;
		float yM = yMax;

		// Get the porcentage asked in px from screen
		float porcentageX = (xM / 100) * porcX;
		float porcentageY = (yM / 100) * porcY;

		List<Float> coordXY = new ArrayList<Float>();
		coordXY.add(porcentageX);
		coordXY.add(porcentageY);
		return coordXY;
	}


	public List<Float> getPorcentageLandscapet(float porc, int xMax, int yMax) {

		float porcX = porc / Constants.RATIO;
		float porcY = porc;

		// Get screen centre
		float xM = xMax;
		float yM = yMax;

		// Get the porcentage asked in px from screen
		float porcentageX = (xM / 100) * porcX;
		float porcentageY = (yM / 100) * porcY;

		List<Float> coordXY = new ArrayList<Float>();
		coordXY.add(porcentageX);
		coordXY.add(porcentageY);
		return coordXY;
	}


	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		MenuInflater inflater = getMenuInflater();
		inflater.inflate(R.menu.main_menu, menu);
		Util u = new Util(GalleryST.ctx);
		if (u.checkForServiceProject()) {
			menu.getItem(0).setEnabled(true);
			menu.getItem(0).setVisible(true);
		} else {
			menu.getItem(0).setEnabled(false);
			menu.getItem(0).setVisible(false);
		}
		return super.onCreateOptionsMenu(menu);
	}


	@Override
	public boolean onOptionsItemSelected(MenuItem item) {
		switch (item.getItemId()) {
			case R.id.about: {
				callAbout();
				break;
			}

			case R.id.gallery: {
				Intent myIntent = new Intent(GalleryST.ctx, GallerySettingST.class);
				Bundle b = new Bundle();
				b.putFloat(ConfigEnum.SIZE.getCode(), GalleryST.screenPorcentageSize);
				b.putInt(ConfigEnum.ORIENTATION.getCode(), screenOrientation);
				myIntent.putExtras(b);
				startActivityForResult(myIntent, ReturnCodes.REQUEST_OK.getIntCode());
				break;
			}

			case R.id.service: {
				Intent myIntent = new Intent(GalleryST.ctx, ServiceST.class);
				Bundle b = new Bundle();
				b.putIntArray(Constants.IMAGES_IDS, thumbIds);
				b.putBooleanArray(Constants.IDS_SELECTED, thumbsSelected);
				myIntent.putExtras(b);
				startActivityForResult(myIntent, ReturnCodes.ACTIVITY_SERVICE_RESULT.getIntCode());
				break;
			}
		}
		return super.onContextItemSelected(item);
	}


	@Override
	protected void onActivityResult(int requestCode, int resultCode, Intent data) {
		super.onActivityResult(requestCode, resultCode, data);
		switch (resultCode) {
			case (Constants.ACTIVITY_GALLERY_RESULT): {
				Bundle b = data.getExtras();
				GalleryST.screenPorcentageSize = b.getFloat(ConfigEnum.SIZE.getCode());
				GalleryST.this.setRequestedOrientation(b.getInt(ConfigEnum.ORIENTATION.getCode()));
				((BaseAdapter) gallery.getAdapter()).notifyDataSetChanged();
				break;
			}

			case (Constants.ACTIVITY_SERVICE_RESULT): {
				Bundle b = data.getExtras();
				thumbIds = b.getIntArray(Constants.IMAGES_IDS);
				thumbsSelected = b.getBooleanArray(Constants.IDS_SELECTED);
				break;
			}
		}
	}


	public void callAbout() {
		final String nl = System.getProperty("line.separator");
		final String message = "Star Trek Wallpapers" + nl + "Version 3.2" + nl + nl + "By Klaus Villaca" + nl + "February 2012";
		AlertDialog.Builder about = new AlertDialog.Builder(this);
		about.setMessage(message).setCancelable(false).setPositiveButton("Ok", new DialogInterface.OnClickListener() {
			public void onClick(DialogInterface dialog, int id) {
				return;
			}
		});
		AlertDialog alert = about.create();
		alert.setTitle("About");
		alert.setIcon(R.drawable.tng);
		alert.show();
	}


	class UpdateWallpaper extends AsyncTask<Void, Void, Void> {

		@Override
		protected Void doInBackground(Void... param) {
			Bitmap wallpaper = null;
			try {
				Display display = getWindowManager().getDefaultDisplay();
				int width = display.getWidth() * 2;
				int height = display.getHeight();

				Matrix matrix = new Matrix();
				matrix.postScale(width, height);

				wallpaper = BitmapFactory.decodeResource(GalleryST.ctx.getResources(), GalleryST.imageId);
				int bitmapWidth = wallpaper.getWidth();
				int bitmapHeight = wallpaper.getHeight();

				wallpaper = Bitmap.createScaledBitmap(wallpaper, bitmapWidth, bitmapHeight, true);
				GalleryST.ctx.setWallpaper(wallpaper);
				wallpaper.recycle();
				return null;
			} catch (IllegalArgumentException e) {
				Log.e(Constants.TAG, e.getMessage());
			} catch (IOException e) {
				Log.e(Constants.TAG, e.getMessage());
			} catch (SecurityException e) {
				Log.e(Constants.TAG, e.getMessage());
			}
			return null;
		}


		@Override
		protected void onPostExecute(Void result) {
			Toast.makeText(GalleryST.ctx, "Applied with success", Toast.LENGTH_SHORT).show();
		}


		@Override
		protected void onPreExecute() {
		}
	}


	class SoundWallpaper extends AsyncTask<Void, Void, Void> {

		@Override
		protected Void doInBackground(Void... param) {
			MediaPlayer mp = MediaPlayer.create(GalleryST.ctx, R.raw.tostransporter);
			mp.start();
			mp.release();
			return null;
		}


		@Override
		protected void onPostExecute(Void result) {
		}


		@Override
		protected void onPreExecute() {
		}
	}
}